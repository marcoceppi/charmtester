#!/usr/bin/env python

"""
pull info from a juju environments file...
"""

import argparse
import logging
import time
import sys
import yaml
import os

log = logging.getLogger("juju.service_watch")

def print_environment_providers(environments):
    for environment in environments["environments"].keys():
      print(environment + ":" + environments["environments"][environment]["type"])

def print_environment_names(environments):
    for environment_name in environments["environments"].keys():
        print(environment_name)

def print_environment(environments, environment):
    if environments["environments"].has_key(environment):
        environment_hash = environments["environments"][environment]
        for key in environment_hash.keys():
            print(key + ":" + environment_hash[key])
        
def print_environment_key(environments, environment, key):
    if environments["environments"][environment].has_key(key):
        print(environments["environments"][environment][key])

def setup_parser():
    parser = argparse.ArgumentParser(
        description="Extract juju environment information")
    parser.add_argument("key_name", default='', type=str,
                        help="key to display", nargs="?")

    parser.add_argument(
        "-e", "--environment", default='', type=str,
        help="Juju environment to use")

    return parser


def main():
    parser = setup_parser()
    options = parser.parse_args()
    logging.basicConfig(
        level=logging.DEBUG,
        format="%(asctime)s %(name)s:%(levelname)s %(message)s")

    environments_file = open( os.environ.get('HOME',failobj='/home/ubuntu') + "/.juju/environments.yaml" )
    environments = yaml.load(environments_file)
    environments_file.close()

    if options.environment == '':
        print_environment_names(environments)
    else:
        if options.key_name == '':
            print_environment(environments, options.environment)
        else:
            print_environment_key(environments, options.environment, options.key_name)

    sys.exit(0)


if __name__ == '__main__':
    main()
